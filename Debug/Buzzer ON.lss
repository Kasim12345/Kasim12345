
Buzzer ON.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000002ac  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00804000  00804000  000002ac  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002db  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003238  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002d5b  00000000  00000000  0000354b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  000062a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  000065b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000014f0  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d3  00000000  00000000  00007b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00007c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000234  00000234  000002a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.set_millis 0000002c  000001ec  000001ec  00000260  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_14 00000064  00000152  00000152  000001c6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_8 00000036  000001b6  000001b6  0000022a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.main    0000001c  00000218  00000218  0000028c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__ctors_end>
   4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
   8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
   c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  10:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  14:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  18:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  1c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  20:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_8>
  24:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  28:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  2c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  30:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  34:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  38:	0c 94 a9 00 	jmp	0x152	; 0x152 <_etext>
  3c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  40:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  44:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  48:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  4c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  50:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  54:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  58:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  5c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  60:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  64:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  68:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  6c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  70:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  74:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  78:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  7c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  80:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  84:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  88:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  8c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  90:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  94:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  98:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  9c:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  a0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  a4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  a8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  ac:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  b0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  b4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  b8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  bc:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  c0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  c4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  c8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  cc:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  d0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  d4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  d8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  dc:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  e0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  e4:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  e8:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  ec:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>
  f0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__bad_interrupt>

000000f4 <.dinit>:
  f4:	40 00       	.word	0x0040	; ????
  f6:	40 04       	cpc	r4, r0
  f8:	80 00       	.word	0x0080	; ????

000000fa <__ctors_end>:
  fa:	11 24       	eor	r1, r1
  fc:	1f be       	out	0x3f, r1	; 63
  fe:	cf ef       	ldi	r28, 0xFF	; 255
 100:	cd bf       	out	0x3d, r28	; 61
 102:	df e7       	ldi	r29, 0x7F	; 127
 104:	de bf       	out	0x3e, r29	; 62

00000106 <__do_copy_data>:
 106:	e4 ef       	ldi	r30, 0xF4	; 244
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	19 c0       	rjmp	.+50     	; 0x140 <__do_clear_bss+0x8>
 10e:	b7 91       	elpm	r27, Z+
 110:	a7 91       	elpm	r26, Z+
 112:	37 91       	elpm	r19, Z+
 114:	27 91       	elpm	r18, Z+
 116:	07 91       	elpm	r16, Z+
 118:	07 fd       	sbrc	r16, 7
 11a:	0e c0       	rjmp	.+28     	; 0x138 <__do_clear_bss>
 11c:	97 91       	elpm	r25, Z+
 11e:	87 91       	elpm	r24, Z+
 120:	ef 01       	movw	r28, r30
 122:	f9 2f       	mov	r31, r25
 124:	e8 2f       	mov	r30, r24
 126:	0b bf       	out	0x3b, r16	; 59
 128:	07 90       	elpm	r0, Z+
 12a:	0d 92       	st	X+, r0
 12c:	a2 17       	cp	r26, r18
 12e:	b3 07       	cpc	r27, r19
 130:	d9 f7       	brne	.-10     	; 0x128 <__do_copy_data+0x22>
 132:	fe 01       	movw	r30, r28
 134:	1b be       	out	0x3b, r1	; 59
 136:	04 c0       	rjmp	.+8      	; 0x140 <__do_clear_bss+0x8>

00000138 <__do_clear_bss>:
 138:	1d 92       	st	X+, r1
 13a:	a2 17       	cp	r26, r18
 13c:	b3 07       	cpc	r27, r19
 13e:	e1 f7       	brne	.-8      	; 0x138 <__do_clear_bss>
 140:	e9 3f       	cpi	r30, 0xF9	; 249
 142:	f4 07       	cpc	r31, r20
 144:	21 f7       	brne	.-56     	; 0x10e <__do_copy_data+0x8>
 146:	0e 94 0c 01 	call	0x218	; 0x218 <main>
 14a:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>

Disassembly of section .text:

00000234 <__bad_interrupt>:
 234:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.set_millis:

000001ec <set_millis>:
unsigned long millis;


void set_millis(void)
{
	sei();
 1ec:	78 94       	sei
	TCB0_CCMP = 3999;				// Write a TOP value to the Compare/Capture (TCBn.CCMP) register
 1ee:	8f e9       	ldi	r24, 0x9F	; 159
 1f0:	9f e0       	ldi	r25, 0x0F	; 15
 1f2:	80 93 0c 0b 	sts	0x0B0C, r24	; 0x800b0c <__TEXT_REGION_LENGTH__+0x7e0b0c>
 1f6:	90 93 0d 0b 	sts	0x0B0D, r25	; 0x800b0d <__TEXT_REGION_LENGTH__+0x7e0b0d>
	
	TCB0_CTRLB |= (0x0 << 0);
 1fa:	e1 e0       	ldi	r30, 0x01	; 1
 1fc:	fb e0       	ldi	r31, 0x0B	; 11
 1fe:	80 81       	ld	r24, Z
 200:	80 83       	st	Z, r24
	TCB0_INTCTRL |= (1<<0);
 202:	e5 e0       	ldi	r30, 0x05	; 5
 204:	fb e0       	ldi	r31, 0x0B	; 11
 206:	80 81       	ld	r24, Z
 208:	81 60       	ori	r24, 0x01	; 1
 20a:	80 83       	st	Z, r24
	
	TCB0_CTRLA |= (1<<0)|(0x0 <<1); // ENABLE bit in the Control A (TCBn.CTRLA) register,
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	fb e0       	ldi	r31, 0x0B	; 11
 210:	80 81       	ld	r24, Z
 212:	81 60       	ori	r24, 0x01	; 1
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

Disassembly of section .text.__vector_14:

00000152 <__vector_14>:
}

ISR(TCB0_INT_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	0b b6       	in	r0, 0x3b	; 59
 15e:	0f 92       	push	r0
 160:	8f 93       	push	r24
 162:	9f 93       	push	r25
 164:	af 93       	push	r26
 166:	bf 93       	push	r27
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
	millis++;
 16c:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 170:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 174:	a0 91 02 40 	lds	r26, 0x4002	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 178:	b0 91 03 40 	lds	r27, 0x4003	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	a1 1d       	adc	r26, r1
 180:	b1 1d       	adc	r27, r1
 182:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 186:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 18a:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 18e:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
	TCB0_INTFLAGS |= (1<<0);
 192:	e6 e0       	ldi	r30, 0x06	; 6
 194:	fb e0       	ldi	r31, 0x0B	; 11
 196:	80 81       	ld	r24, Z
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 83       	st	Z, r24
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	0f 90       	pop	r0
 1aa:	0b be       	out	0x3b, r0	; 59
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

Disassembly of section .text.__vector_8:

000001b6 <__vector_8>:

ISR(PORTA_PORT_vect)
{
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	8f 93       	push	r24
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	PORTA_INTFLAGS & (1<<1);
 1ca:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
	PORTA_OUT |= (1<<0);
 1ce:	e4 e0       	ldi	r30, 0x04	; 4
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	80 81       	ld	r24, Z
 1d4:	81 60       	ori	r24, 0x01	; 1
 1d6:	80 83       	st	Z, r24
}
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	8f 91       	pop	r24
 1de:	0f 90       	pop	r0
 1e0:	0b be       	out	0x3b, r0	; 59
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

Disassembly of section .text.main:

00000218 <main>:

int main(void)
{
	
	set_millis();
 218:	0e 94 f6 00 	call	0x1ec	; 0x1ec <set_millis>
	
	PORTA_DIR |= (1<<0);    // OUTPUT
 21c:	e0 e0       	ldi	r30, 0x00	; 0
 21e:	f4 e0       	ldi	r31, 0x04	; 4
 220:	80 81       	ld	r24, Z
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 83       	st	Z, r24
	
	PORTA_DIR &= ~(1<<1);   // INPUT
 226:	80 81       	ld	r24, Z
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	80 83       	st	Z, r24
	
	PORTA_PIN1CTRL=0x01;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <__TEXT_REGION_LENGTH__+0x7e0411>
 232:	ff cf       	rjmp	.-2      	; 0x232 <main+0x1a>
